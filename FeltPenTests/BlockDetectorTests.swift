//
//  BlockDetectorTests.swift
//  FeltPenTests
//
//  Created by Aleksei Gordeev on 26/09/2017.
//  Copyright Â© 2017 Aleksei Gordeev. All rights reserved.
//

import XCTest
@testable import FeltPen

class BlockDetectorTests: XCTestCase {
    
    var detector: BlockDetector!
    
    override func setUp() {
        super.setUp()
        self.detector = BlockDetector()
    }
    
    override func tearDown() {
        self.detector = nil
        super.tearDown()
    }
    
    func testCodeBlock() {
        let string = "```\n123\n```"
        let expectedRange = NSRange.init(fullRangeOfString: string)
        let attrString = NSMutableAttributedString.init(string: string)
        try! self.detector.process(text: attrString)
        attrString.enumerateDetectorAttribute(.codeBlock, block: { (v, range, _) in
            guard let value = v else {
                return
            }
            guard let boolValue = value as? Bool else {
                XCTFail("Unexpected value: \(value)")
                return
            }
            
            XCTAssertTrue(boolValue)
            XCTAssertTrue(NSEqualRanges(range, expectedRange), "Expected \(expectedRange), got \(range)")
        })
    }
    
    func testQuoteBlock() {
        let string = "Test\n>Test\nTest"
        let expectedRange = (string as NSString).range(of: ">Test")
        let attrString = NSMutableAttributedString.init(string: string)
        try! self.detector.process(text: attrString)
        attrString.enumerateDetectorAttribute(.quote, block: { (v, range, _) in
            guard let value = v else {
                return
            }
            
            guard let boolValue = value as? Bool else {
                return
            }
            XCTAssertTrue(boolValue)
            XCTAssertTrue(NSEqualRanges(range, expectedRange), "Expected \(expectedRange), got \(range)")
        })
    }
    
    func testQuoteEmbeddedInCodeDoesNotCount() {
        let string = "Test\n```\nTest2\n>QuoteTest\n```\n"
        let attrString = NSMutableAttributedString.init(string: string)
        var isCodeDetected = false
        var isQuoteDetected = false
        try! self.detector.process(text: attrString)
        attrString.enumerateDetectorAttribute(.codeBlock) { (v, _, stopPtr) in
            guard v != nil else {
                return
            }
            isCodeDetected = true
            stopPtr[0] = true
        }
        attrString.enumerateDetectorAttribute(.quote) { (v, _, stopPtr) in
            guard v != nil else {
                return
            }
            
            isQuoteDetected = true
            stopPtr[0] = true
        }
        XCTAssertFalse(isQuoteDetected)
        XCTAssertTrue(isCodeDetected)
    }
}
