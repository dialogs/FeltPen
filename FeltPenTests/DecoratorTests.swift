//
//  DecoratorTests.swift
//  FeltPenTests
//
//  Created by Aleksei Gordeev on 03/10/2017.
//  Copyright Â© 2017 Aleksei Gordeev. All rights reserved.
//

import XCTest
@testable import FeltPen

class DecoratorTests: XCTestCase {
    
    private var decorator: Decorator!
    
    override func setUp() {
        super.setUp()
        self.decorator = Decorator.init()
    }
    
    override func tearDown() {
        self.decorator = nil
        super.tearDown()
    }
    
    func testPefrormance() {
        let text = "_HELLO_, this one is *text* for testing ~performance~. \n Mark _*text*_ as you ~*wish*~."
        let string = NSMutableAttributedString.init(string: text)
        let detector = WrappersDetector.init(searchingItems: [.asteriks, .tilde, .underscore])
        try! detector.process(text: string)
        
        self.measure {
            try! self.decorator.process(text: string)
        }
    }
    
    func testStrokeText() {
        let string = NSMutableAttributedString.init(string: "~stroke~")
        
        let detector = WrappersDetector.init(searchingItems: [.tilde])
        try! detector.process(text: string)
        
        let decorator = Decorator.init()
        try! decorator.process(text: string)
        
        XCTAssertEqual(string.string, "stroke")
        let attributes = string.attributes(at: 0, effectiveRange: nil)
        guard let strikeStyleValue = attributes[NSAttributedStringKey.strikethroughStyle],
            let strikeRawValue = strikeStyleValue as? Int else {
            XCTFail("Text has no strike")
            return
        }
        
        XCTAssertEqual(strikeRawValue, NSUnderlineStyle.patternSolid.rawValue)
    }
    
    func testMention() {
        let string = "Tell @vladimir I want to talk to him."
        let text = NSMutableAttributedString.init(string: string)
        
        let detector = MentionDetector.init(config: .init(dotsAllowed: true, minNickLength: 3, maxNickLength: 100))
        try! detector.process(text: text)
        
        self.decorator.decoratableAttributes = [.mention]
        try! self.decorator.process(text: text)
        
        let fullRange = NSRange.range(of: string)
        let expectedMentionRange = (string as NSString).range(of: "@vladimir")
        text.enumerateAttribute(NSAttributedStringKey.backgroundColor, in: fullRange, options: []) { (v, range, _) in
            guard v != nil else {
                return
            }
            
            XCTAssertTrue(NSEqualRanges(expectedMentionRange, range))
        }
    }
    
    func testMixedStyles() {
        let attributedString = NSMutableAttributedString.init(string: "TEST")
        attributedString.addAttribute(NSAttributedStringKey(rawValue: DetectorAttributeName.bold.rawValue), value: true,
                                      range: NSRange(location: 0, length: 3))
        attributedString.addAttribute(NSAttributedStringKey(rawValue: DetectorAttributeName.italic.rawValue), value: true,
                                      range: NSRange(location: 1, length: 3))
        
        try! self.decorator.process(text: attributedString)
        
        struct Expect {
            let range: NSRange
            let font: UIFont
            
            init(_ range: CountableRange<Int>, font: UIFont) {
                self.range = NSRange(location: range.lowerBound, length: range.count)
                self.font = font
            }
            
            init(_ range: CountableRange<Int>, systemModified: UIFont.FontModifier) {
                self.range = NSRange(location: range.lowerBound, length: range.count)
                self.font = UIFont.system().font(modified: systemModified)
            }
        }
        
        var expects = [Expect]()
        expects.append(.init(0..<1, systemModified: .bold))
        expects.append(.init(1..<3, systemModified: [.bold, .italic]))
        expects.append((.init(3..<4, systemModified: .italic)))
        
        let expectedRanges: ()-> (String) = {
            return expects.map({NSStringFromRange($0.range)}).joined(separator: ", ")
        }
        
        let range = NSRange.range(of: attributedString.string)
        attributedString.enumerateAttributes(in: range, options: []) { (attributes, range, _) in
            
            guard let expect = expects.first(where: { NSEqualRanges(range, $0.range)}) else {
                XCTFail("Unexpected range: \(range) in \(expectedRanges()) , attrs: \(attributes)")
                return
            }
            
            guard let fontValue = attributes[NSAttributedStringKey.font], let font = fontValue as? UIFont else {
                XCTFail("Unexpected attributes: \(attributes)")
                return
            }
            
            XCTAssertEqual(font, expect.font, "Expect: \(expect.font), got \(font)")
        }
    }
    
}
