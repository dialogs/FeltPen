//
//  MentionDetectorTests.swift
//  FeltPenTests
//
//  Created by Aleksei Gordeev on 26/09/2017.
//  Copyright Â© 2017 Aleksei Gordeev. All rights reserved.
//

import XCTest
@testable import FeltPen

class MentionDetectorTests: XCTestCase {
    
    private var detector: MentionDetector!
    
    override func setUp() {
        super.setUp()
        self.detector = MentionDetector.init()
    }
    
    override func tearDown() {
        self.detector = nil
        super.tearDown()
    }
    
    func testSimpleMention() {
        let string = "@gusnkt"
        let expectedRange = NSRange.range(of: string)
        let attrString = NSMutableAttributedString.init(string: string)
        try! self.detector.process(text: attrString)
        
        var matchFound = false
        
        attrString.enumerateNonNilDetectorAttribute(.mention) { (v, range, _) in
            matchFound = true
            
            XCTAssertTrue(range.isEqualTo(expectedRange), "Expected: \(expectedRange), got: \(range)")
        }
        
        XCTAssertTrue(matchFound)
    }
    
    func testInTextMention() {
        let string = "Could you tell @mikhail about it?"
        let expectedRange = (string as NSString).range(of: "@mikhail")
        let attrString = NSMutableAttributedString.init(string: string)
        try! self.detector.process(text: attrString)
        
        var matchFound = false
        attrString.enumerateNonNilDetectorAttribute(.mention) { (value, range, _) in
            guard let boolValue = value as? Bool else {
                XCTFail()
                return
            }
            XCTAssertTrue(boolValue)
            XCTAssertTrue(range.isEqualTo(expectedRange),
                          String.expection(expectedRange: expectedRange, actualRange: range, inString: string))
            
            matchFound = true
        }
        
        XCTAssertTrue(matchFound)
    }
    
    func testAllowedNicksMention() {
        let string = "Could you tell @maxim that @dmitry finish his task?"
        let dmitryMentionExpectedRange = (string as NSString).range(of: "@dmitry")
        let maximMentionExpectedRange = (string as NSString).range(of: "@maxim")
        let attrString = NSMutableAttributedString.init(string: string)
        self.detector.valueProvider = BasicMentionDetectorMentionValueWrapper.dictionary(["@dmitry":101])
        try! self.detector.process(text: attrString)
        
        var dmitryFound = false
        var maximFound = false
        attrString.enumerateNonNilDetectorAttribute(.mention) { (value, range, _) in
            if range.isEqualTo(dmitryMentionExpectedRange) {
                dmitryFound = true
                guard let dmitryId = value as? Int else {
                    XCTFail("Unexpected dmitry mention value: \(value)")
                    return
                }
                XCTAssertEqual(dmitryId, 101)
            }
            else if NSIntersectionRange(range, maximMentionExpectedRange).length != 0 {
                maximFound = true
            }
            else {
                XCTFail("Unexpected mention range")
            }
        }
        
        XCTAssertTrue(dmitryFound, "Dmitry was not found")
        XCTAssertFalse(maximFound, "Maxim was found")
    }
    
}
